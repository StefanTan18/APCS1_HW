import java.util.ArrayList;
public class SortTester{
	//=================== HELPER METHODS ===================
	//precond: lo < hi && size > 0
	//postcond: returns an ArrayList of random integers
	//          from lo to hi, inclusive
	public static ArrayList populate( int size, int lo, int hi )
	{
	    ArrayList<Integer> retAL = new ArrayList<Integer>();
	    while( size > 0 ) {
		//     offset + rand int on interval [lo,hi]
		retAL.add( lo + (int)( (hi-lo+1) * Math.random() ) );
		size--;
	    }
	    return retAL;
	}

	//randomly rearrange elements of an ArrayList
	public static void shuffle( ArrayList al )
	{
	    int randomIndex;
	    //setup for traversal fr right to left
	    for( int i = al.size()-1; i > 0; i-- ) {
		//pick an index at random
		randomIndex = (int)( (i+1) * Math.random() );
		//swap the values at position i and randomIndex
		al.set( i, al.set( randomIndex, al.get(i) ) );
	    }
	}
	//======================================================


    //DESCRIPTIVE COMMENTS
    public static void main(String[] args)
    {




	//bubbleSort

	//best case scenario: No swaps required, and finishes in one pass.
	
	ArrayList glen = new ArrayList<Integer>();
	glen.add(0);
	glen.add(1);
	glen.add(2);
	glen.add(3);
	glen.add(4);
	System.out.println( "ArrayList glen before sorting:\n" + glen );
	MySorts.bubbleSort( glen );

	System.out.println( "ArrayList glen after sorting:\n" + glen );







	
	
















	


	
    }//end main
















    
}//ends class
